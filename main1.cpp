#include <iostream>
#include <string>
#include <vector>
#include <Windows.h>


void algorithmKMP(std::string& templ);//Функция реализации алгоритма
void makeArr(int* arr, int len, std::string& templ);//Функция вычисления префикс функции



int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	std::string templ;
	std::cin >> templ;
	algorithmKMP(templ);
	system("pause");
}


void algorithmKMP(std::string& templ) {
	std::vector<int> res;
	std::cout << "Поиск вхождения:\n";
	bool isFirst = true;
	int* arr = new int[templ.length()];
	makeArr(arr, templ.length(), templ);//Рассчитываем значение префикс функции для образца
	int k = 0;//Инициализируем индексы на начало строк
	int l = 0;
	char curr;
	std::cin >> curr;
	while (!std::cin.eof()) {//Пока текст не считан полностью
		if (curr == templ[l]) {//Если совпадение с образом
			std::cout << "Символы номер " << k << " в строке и " << l << " в образе совпадают (" << templ[l] << ")\n";
			l++;
			std::cout << "Номер символа в образе увеличивается на 1(" << l << ")\n";
			if (l == templ.length()) {//Если входжение найдено
				std::cout << "Номер символа в образе равен длине образа -> вхождение найдено: " << k - templ.length() + 1 << std::endl;
				res.push_back(k - templ.length() + 1);
				isFirst = false;
				std::cout << "Номер символа в образе равен 0\n";
			}
			k++;
			std::cout << "Номер символа в тексте увеличивается на 1 (" << k << ")\n";
			std::cin >> curr;
		}
		else if (l == 0) {//Если образ очередной символ не совпадает, а индекс образа уже указывает на начало
			std::cout << "Символы номер " << k << " в строке и " << l << " в образе не совпадают (" << curr << " и " << templ[l] << ")\n";
			k++;
			std::cout << "Номер слова в тексте увеличивается на 1 (" << k << ")\n";
			std::cin >> curr;
			if (std::cin.eof() && isFirst) {
				std::cout << "Номер символа в тексте равен длине текста, а вхождение так и не было найдено\n";
				res.push_back(-1);
			}
		}
		else {//Если индекс образа не указывает на начало
			std::cout << "Символы номер " << k << " в строке и " << l << " в образе не совпадают (" << curr << " и " << templ[l] << ")\n";
			std::cout << "Номер слова в образе становится равным значению префикс функции символа с номером на один меньше (" << arr[l - 1] << ")\n";
			l = arr[l - 1];//Индекс образа становится равным значением префикс функции для предыдущего символа
		}
	}
	if (std::cin.eof() && res.empty()) {//Если не было найдено совпадений
		res.push_back(-1);
	}
	std::cout << "Строка закончилась\nРезультат:\n";
	for (int i = 0; i < res.size(); i++) {
		if (i != 0) {
			std::cout << ",";
		}
		std::cout << res[i];
	}
}


void makeArr(int* arr, int len, std::string& templ) {
	std::cout << "Вычисление префикс функции:\n";
	arr[0] = 0;//Первый символ - всегда 0
	std::cout << "Значение префикс функции для символа " << templ[0] << " равно 0\n";
	int j = 0;//Инициализируем индексы ообраза и массива
	int i = 1;
	while (i < len) {// Пока не прошли весь образ
		if (templ[i] == templ[j]) {//Если символы совпадают
			std::cout << "Символы с индексами " << i << " и " << j << " совпадают (" << templ[i] << ")\n";
			arr[i] = j + 1;//функция для символа на один больше, чем функция от предыдущего
			std::cout << "Значение префикс функции для символа " << templ[i] << " равно" << arr[i] << "\n";
			i++;
			j++;
		}
		else if (j == 0) {//Если не овпадают и индекс в массиве уже 0
			std::cout << "Символы с индексами " << i << " и " << j << " не совпадают (" << templ[i] << " и " << templ[j] << "). Первы индекс увеличивается\n";
			arr[i] = 0;//Функция для символа равна 0
			std::cout << "Значение префикс функции для символа " << templ[i] << " равно 0\n";
			i++;
		}
		else {//Если индекс в массиве не 0
			j = arr[j - 1];//Индекс в массиве равен префикс функции от предыдущего символа
			std::cout << "Символы с индексами " << i << " и " << j << " не совпадают (" << templ[i] << " и " << templ[j] << "). Второй индекс становится равным значению префикс функции предыдущего символа (" << j << ")\n";
		}
	}

	std::cout << "Значение префикс функции:\n";
	for (int i = 0; i < len; i++) {
		std::cout << templ[i] << " - " << arr[i] << std::endl;
	}
}